#
# @lc app=leetcode.cn id=2713 lang=python3
#
# [2713] 矩阵中严格递增的单元格数
#
# 给你一个下标从 1 开始、大小为 m x n 的整数矩阵 mat，你可以选择任一单元格作为 起始单元格 。

# 从起始单元格出发，你可以移动到 同一行或同一列 中的任何其他单元格，但前提是目标单元格的值 严格大于 当前单元格的值。

# 你可以多次重复这一过程，从一个单元格移动到另一个单元格，直到无法再进行任何移动。

# 请你找出从某个单元开始访问矩阵所能访问的 单元格的最大数量 。

# 返回一个表示可访问单元格最大数量的整数。


# 示例 1：
# 输入：mat = [[3,1],[3,4]]
# 输出：2
# 解释：上图展示了从第 1 行、第 2 列的单元格开始，可以访问 2 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 2 个单元格，因此答案是 2 。 

# 示例 2：
# 输入：mat = [[1,1],[1,1]]
# 输出：1
# 解释：由于目标单元格必须严格大于当前单元格，在本示例中只能访问 1 个单元格。 

# 示例 3：
# 输入：mat = [[3,1,6],[-9,5,7]]
# 输出：4
# 解释：上图展示了从第 2 行、第 1 列的单元格开始，可以访问 4 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 4 个单元格，因此答案是 4 。  
 

# 提示：
# m == mat.length 
# n == mat[i].length 
# 1 <= m, n <= 10^5
# 1 <= m * n <= 10^5
# -10^5 <= mat[i][j] <= 10^5

# Hard

from collections import defaultdict
from typing import List
# @lc code=start
class Solution:
    def maxIncreasingCells(self, mat: List[List[int]]) -> int:
        # m, n = len(mat), len(mat[0])
        # arr = defaultdict(list)
        # for i, row in enumerate(mat):
        #     for j, v in enumerate(row):
        #         arr[v].append((i, j))
        
        # # 记录每行，每列当前最多的步数
        # col = [0] * n
        # row = [0] * m
        # for _, pos in sorted(arr.items(), key=lambda k: k[0]):
        #     maxSteps = [max(row[i], col[j]) + 1 for i, j in pos]
        #     for maxStep, (i, j) in zip(maxSteps, pos):
        #         print(maxStep, i, j)
        #         col[j] = max(col[j], maxStep)
        #         row[i] = max(row[i], maxStep)

        # return max(row)
        m, n = len(mat), len(mat[0])
        arr = []
        for i, row in enumerate(mat):
            for j, v in enumerate(row):
                arr.append((v, i, j))
        arr.sort(key=lambda x: x[0]) # 按值排序

        # 记录每行，每列当前最多和次多步数的格，对应的值和步数
        colCache = defaultdict(list)
        rowCache = defaultdict(list)
        res = 0
        for v, i, j in arr:
            maxSteps = 1
            if i in rowCache:
                if v == rowCache[i][0][0]:
                    # 看看有没有次高的，找次高的
                    if len(rowCache[i]) > 1:
                        maxSteps = max(maxSteps, rowCache[i][1][1]+1)
                else:
                    maxSteps = max(maxSteps, rowCache[i][0][1]+1)
            if j in colCache:
                if v == colCache[j][0][0]:
                    if len(colCache[j]) > 1:
                        maxSteps = max(maxSteps, colCache[j][1][1]+1)
                else:
                    maxSteps = max(maxSteps, colCache[j][0][1]+1)

            if len(rowCache[i]) == 0:
                rowCache[i].append((v, maxSteps))
            elif maxSteps > rowCache[i][0][1]:
                if len(rowCache[i]) == 2:
                    rowCache[i][1] = rowCache[i][0]
                else:
                    rowCache[i].append(rowCache[i][0])
                rowCache[i][0] = (v, maxSteps)

            if len(colCache[j]) == 0:
                colCache[j].append((v, maxSteps))
            elif maxSteps > colCache[j][0][1]:
                if len(colCache[j]) == 2:
                    colCache[j][1] = colCache[j][0]
                else:
                    colCache[j].append(colCache[j][0])
                colCache[j][0] = (v, maxSteps)

            print(maxSteps, i, j)
            res = max(res, maxSteps)

        return res



# @lc code=end

if __name__ == "__main__":
    solution = Solution()
    print(solution.maxIncreasingCells([
        [-37,2,43,-25,22,21,-7,38,10,-37,-18,-20,41,35,-18,38,-21,-30,17,14,0,-36,14,-1,30,12,-3,-2,5,4,-8,-6,17,-47,-40],
        [46,-38,10,-19,40,15,-22,45,45,6,-25,45,-50,-50,28,-42,17,26,31,-42,-16,49,48,3,-16,13,-30,-24,-23,-14,-36,-11,1,-47,26],
        [12,-20,-50,0,50,23,-21,-41,46,46,-33,20,-37,-43,-41,-2,-46,-39,-49,47,-2,-48,-46,-44,-18,-8,27,-25,50,-4,-7,-6,-21,44,34],
        [34,46,22,12,25,11,-40,-30,24,47,-2,39,-5,27,24,-23,-40,-2,44,45,-13,-34,11,25,18,44,19,-43,-16,-15,30,12,15,46,-25],
        [40,-34,48,18,-27,-13,35,25,16,-20,-48,-30,31,29,48,44,40,-15,6,45,-49,22,-48,8,43,-29,-43,15,31,36,29,35,49,-29,46],
        [9,-42,-1,8,-49,3,35,40,-29,24,-16,-21,-37,-27,38,2,-50,-41,-42,4,-13,-21,-50,-40,8,-29,20,-47,-7,30,-18,40,-47,-13,-16],
        [-42,39,13,15,18,-33,-29,16,-29,44,-34,23,20,-8,22,-14,48,14,33,-48,-29,34,-21,-13,19,47,8,-24,-29,19,-22,37,16,-32,13],
        [5,17,-9,5,20,-2,5,29,-49,-43,18,13,-16,38,39,-3,-20,43,-47,-36,6,1,16,47,38,-27,-41,1,0,27,29,-37,-41,-40,-4],
        [-37,27,-32,39,4,-17,-45,40,40,-37,37,-47,25,-42,20,-33,-6,-31,16,-42,5,38,37,12,-24,-8,-48,19,20,-50,-2,-24,50,21,19],
        [-26,7,-21,-5,22,-35,-9,-30,-49,-17,-31,-46,-23,47,49,-17,-25,0,49,4,23,-7,-37,-17,-24,-8,-32,6,-12,-34,-29,-44,29,6,-44],
        [17,8,-37,-31,34,-10,-18,-17,44,-49,-33,29,-47,-10,-26,12,-49,-14,49,-46,-50,23,4,6,-26,-47,-46,9,34,-7,-21,46,-20,-34,32],
        [25,25,38,-9,-33,-29,41,33,46,33,-5,35,-43,-7,-2,-15,-47,39,46,-45,-18,-20,-27,44,28,-32,-27,-19,17,0,-29,3,-24,-13,15],
        [13,11,12,15,-50,7,23,26,21,-21,-28,6,40,-45,4,48,21,-20,26,-40,1,-14,-12,43,-3,34,37,17,-19,17,-10,6,8,31,-6],
        [-45,-11,39,-34,49,-11,8,-10,38,23,-44,-6,-17,-49,-9,-2,32,-30,-5,41,-22,-29,16,-1,-6,39,-35,26,28,18,12,3,8,-28,-3],
        [-11,34,-20,-25,-27,37,29,-48,-43,33,-47,-35,-38,23,40,46,-5,-26,-37,-39,-38,-25,49,-23,49,48,5,43,-34,-48,-17,-26,-16,-4,-15],
        [48,38,17,-36,-50,-41,-21,-3,9,25,11,5,27,-3,2,17,22,-36,-22,-43,25,-31,11,-27,48,43,-26,14,-15,-12,20,-39,34,-39,10],
        [40,19,-8,18,25,-29,-41,19,38,12,43,16,-21,38,48,-19,-41,-43,-26,-17,-13,-7,-27,-41,23,3,9,44,-33,6,-37,33,34,8,-25],
        [-12,-14,-26,-44,9,20,-21,-12,7,8,1,-11,43,-21,-36,19,-50,-26,31,25,0,36,3,-15,21,-3,-3,24,-8,20,-8,-16,-2,-4,-42],
        [-24,-34,-35,-14,-37,32,11,-22,-49,34,46,-45,27,-47,-47,-47,-6,-31,10,13,48,-16,1,38,-11,-46,3,4,-17,-49,38,50,-5,26,-6],
        [-32,26,0,-12,-5,-17,49,4,21,24,33,10,23,23,13,-13,-32,6,-12,38,3,-3,-16,44,50,-48,-22,-13,4,17,-24,-49,-35,50,-28]])) # 61
    
    # print(solution.maxIncreasingCells([[3,1],[3,4]])) # 2
    # print(solution.maxIncreasingCells([[7,2],[6,5]])) # 4
    # print(solution.maxIncreasingCells([[1,1],[1,1]])) # 1
    # print(solution.maxIncreasingCells([[3,1,6],[-9,5,7]])) # 4