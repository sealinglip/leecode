#
# @lc app=leetcode.cn id=672 lang=python3
#
# [672] 灯泡开关 Ⅱ
#
# 房间中有 n 只已经打开的灯泡，编号从 1 到 n 。墙上挂着 4 个开关 。

# 这 4 个开关各自都具有不同的功能，其中：

# 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开）
# 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, ...）
# 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, ...）
# 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, ...（即 1, 4, 7, 10, ...）
# 你必须 恰好 按压开关 presses 次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。

# 给你两个整数 n 和 presses ，执行完所有按压之后，返回 不同可能状态 的数量。


# 示例 1：
# 输入：n = 1, presses = 1
# 输出：2
# 解释：状态可以是：
# - 按压开关 1 ，[关]
# - 按压开关 2 ，[开]

# 示例 2：
# 输入：n = 2, presses = 1
# 输出：3
# 解释：状态可以是：
# - 按压开关 1 ，[关, 关]
# - 按压开关 2 ，[开, 关]
# - 按压开关 3 ，[关, 开]

# 示例 3：
# 输入：n = 3, presses = 1
# 输出：4
# 解释：状态可以是：
# - 按压开关 1 ，[关, 关, 关]
# - 按压开关 2 ，[关, 开, 关]
# - 按压开关 3 ，[开, 关, 开]
# - 按压开关 4 ，[关, 开, 开]

# 提示：
# 1 <= n <= 1000
# 0 <= presses <= 1000

# 复习

# @lc code=start
class Solution:
    def flipLights(self, n: int, presses: int) -> int:
        # 同一操作执行偶数次，作用是抵消的
        # 操作的执行顺序不影响最终结果，所有操作，可以化简为只留下奇数次的操作，顺序无关
        # 操作有很强的周期性，
        # 开关1：周期为1
        # 开关2、3：周期为2
        # 开关4：周期为3
        # 最小公倍数为6，我们只需要考虑长度不超过6即可
        # 四个开关对应的操作向量分别为
        # x1 = [1, 1, 1, 1, 1, 1]
        # x2 = [1, 0, 1, 0, 1, 0]
        # x3 = [0, 1, 0, 1, 0, 1]
        # x4 = [1, 0, 0, 1, 0, 0]
        # y = a1x1 + a2x2 + a3x3 + a4x4, 其中ai只能为0 或 1
        # 穷举可得
        # 1, 1, 1, 1, 1, 1  # x1  # No.1
        # 1, 0, 1, 0, 1, 0  # x2  # No.2
        # 0, 1, 0, 1, 0, 1  # x3  # No.3
        # 1, 0, 0, 1, 0, 0  # x4  # No.4
        # 0, 1, 0, 1, 0, 1  # x1 + x2 == x3
        # 1, 0, 1, 0, 1, 0  # x1 + x3 == x2
        # 0, 1, 1, 0, 1, 1  # x1 + x4  # No.5
        # 1, 1, 1, 1, 1, 1  # x2 + x3 == x1
        # 0, 0, 1, 1, 1, 0  # x2 + x4  # No.6
        # 1, 1, 0, 0, 0, 1  # x3 + x4  # No.7
        # 0, 0, 0, 0, 0, 0  # x1 + x2 + x3  # No.8
        # 0, 1, 1, 0, 1, 1  # x2 + x3 + x4 == x1 + x4
        # 0, 0, 1, 1, 1, 0  # x1 + x3 + x4 == x2 + x4
        # 1, 1, 0, 0, 0, 1  # x1 + x2 + x4 == x3 + x4
        # 1, 0, 0, 1, 0, 0  # x1 + x2 + x3 + x4 == x4
        # 所以最多只有8种情况
        # 只一次的话，最多4种；两次，最多7种；三次及以上，最多8种

        if presses == 0:
            return 1
        if n == 1:
            return 2
        elif n == 2:
            return (3 if presses == 1 else 4)
        else:
            return (8 if presses > 2 else (4 if presses == 1 else 7))
        # @lc code=end
